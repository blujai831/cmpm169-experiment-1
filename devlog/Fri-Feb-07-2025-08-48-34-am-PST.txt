Fri, Feb 07 2025, 08:48:34am PST
Guard against false positives in toggle-local-server.sh
If the pid file exists, and so does the corresponding process, the script is supposed to bring down the server instead of bringing it up. If the pid file exists, but the corresponding process does *not* -- which could happen in the event of an application crash, OS panic, external kill, or reboot without first shutting down the server -- then the script is supposed to clean up the stale pid file and bring up the server, rather than trying to bring it down when it's already down. The problem with this logic as previously implemented was that it assumed that if the process identified by the pid file exists, then it is necessarily the server process. If we're already accounting for the possibility of abnormal termination of the server, then we can't make that assumption. The pid would then have been reclaimed, and could have been reassigned to a different process. To check for this condition, the script now uses a no-op command-line option to "tag" the server process with a specific plaintext description, and then, when run while the process appears at first glance to exist, it additionally checks the process table entry for the text of that description. If there is *no* match, then we can be sure the process is not our old server process despite sharing its pid. If it *does* match, then we can be sure either that the process *is* our server process, *or* that the process is *maliciously imitating* our server process, in which case killing it, though erroneous, is harmless.
